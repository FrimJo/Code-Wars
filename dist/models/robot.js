"use strict";
const path = '../users/';
class Robot {
    constructor(id) {
        this.id = id;
        this._x = 120;
        this._y = 120;
        this._numActionsLeft = 2;
        this._startPosition = { x: this._x, y: this._y };
        // Move sped equals distance traveled over one second, speed = 1 => 1px per second
        this._angularSpeed = 0;
        // Rotate sped equals degrees turned over one second, speed = 1 => 1degree per second
        this._linearSpeed = 0;
        // Direction is represented in degrees
        this._direction = 0;
        this._radius = 0;
        this._delta = 0;
        console.log('new robot');
        let url = path + id;
        // Clears the cache of this robot
        delete require.cache[require.resolve(url)];
        // Aquire the new file
        this._require = require(url);
        if (!this._require) {
            throw 'No file detected';
        }
        else {
            // Initiate the robot with start values
            this._require.init(this);
        }
    }
    // Delta is the time pased since last tick
    run(delta) {
        // Reset actions
        this._numActionsLeft = 2;
        // Run script code
        this._require.run(this);
        this._delta += delta;
        let deltaPosition = this.calculatePosition();
        // Run the delta position through a rotation matrix based of direction
        this._x = this._startPosition.x + deltaPosition.x;
        this._y = this._startPosition.y + deltaPosition.y;
        //console.log('(robot)this.position.x: ' + this.position.x + ', this.position.y: ' + this.position.y)
    }
    update() {
        this._numActionsLeft--;
        console.log('update()');
        let angularSpeed = this._angularSpeed == 0 ? 1 : this._angularSpeed;
        this._radius = this._linearSpeed / angularSpeed;
        this._delta = 0;
        this._startPosition = { x: this._x, y: this._y };
    }
    calculatePosition() {
        let angle = this._angularSpeed * this._delta;
        console.log(angle);
        let dx = this._radius - this._radius * Math.cos(angle);
        let dy = this._radius * Math.sin(angle);
        return { x: dx, y: dy };
    }
    get position() {
        return { x: this._x, y: this._y };
    }
    set position(position) {
        this._x = position.x;
        this._y = position.y;
    }
    set direction(direction) {
        if (this._numActionsLeft <= 0)
            return;
        direction = direction > 360.0 ? direction - 360.0 : direction;
        this._direction = this.degreesToRadians(direction);
    }
    // Degrees per second
    set angularSpeed(speed) {
        if (this._numActionsLeft <= 0)
            return;
        speed = speed > 360.0 ? speed - 360.0 : speed;
        this._angularSpeed = this.degreesToRadians(speed);
        this.update();
    }
    get angularSpeed() {
        return this._angularSpeed;
    }
    // pixels per second
    set linearSpeed(speed) {
        this._linearSpeed = speed;
        this.update();
    }
    get linearSpeed() {
        return this._linearSpeed;
    }
    degreesToRadians(degree) {
        return degree * Math.PI / 180.0;
    }
}
module.exports = Robot;

//# sourceMappingURL=data:application/json;base64,
